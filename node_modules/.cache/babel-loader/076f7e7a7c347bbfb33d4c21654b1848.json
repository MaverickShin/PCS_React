{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev88\\\\workspace_react\\\\board2\\\\front\\\\src\\\\components\\\\MainList.js\";\nimport React, { Component } from 'react';\nimport Sidebar from './Sidebar';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport BoardList from './BoardList';\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Center = styled.div`\n  height: 92vh;\n  display: flex;\n  flex-direction: row;\n`;\n_c = Center;\n\nclass MainList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pays: ''\n    };\n\n    this.callApi = async () => {\n      const response = await fetch('/api/test'); // await fetch('/url')로 json 형식으로 가져온 리스트(boardList)를 받아와서 response에 담는다.\n\n      const body = await response.json();\n      return body;\n    };\n  }\n\n  // 생명주기   \n\n  /*       \r\n      componentDidAmont() 메서드 : 컴포넌트가 마운트 된 직후 호출되며, 데이터로딩과 같은 작업 등에 재정의\r\n      예 ) List에 특정 item들을 출력하고자 할때 item에 들어갈 Data가 Server에 존재한다면 Server에서 읽어와서\r\n      item 데이터가 state에 존재시 이 state에 데이터를 setting하는 작업\r\n      마운트 즉 React 컴포넌트가 실제 DOM에 삽입된 후 서버로부터 데이터를 읽어와서 setState후 화면에 rerendering\r\n  */\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      pays: res\n    })).catch(err => console.log(err));\n    console.log(\"this.state.board ==>\" + this.state.pays);\n  }\n  /*\r\n      async/await는 Promise를 더욱 쉽게 사용할 수 있도록 해주는 ES8(ES2017) 문법이다.\r\n      이 문법을 사용하기 위해서 함수의 앞부분에 async 키워드를 추가하고,\r\n      해당 함수 내부에서 Promise의 앞부분에 await 키워드를 사용한다.    \r\n    */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Center, {\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/BoardList\",\n            children: this.state.pays ? this.state.pays.map((b, index) => {\n              return /*#__PURE__*/_jsxDEV(BoardList, {\n                paykind: b.PAYKIND,\n                price: b.PRICE,\n                fee: b.FEE\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 36\n              }, this);\n            }) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MainList;\n\nvar _c;\n\n$RefreshReg$(_c, \"Center\");","map":{"version":3,"sources":["C:/Dev88/workspace_react/board2/front/src/components/MainList.js"],"names":["React","Component","Sidebar","Route","Switch","BrowserRouter","Router","BoardList","styled","Center","div","MainList","state","pays","callApi","response","fetch","body","json","componentDidMount","then","res","setState","catch","err","console","log","render","map","b","index","PAYKIND","PRICE","FEE"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,aAAa,IAAIC,MAAzC,QAAsD,kBAAtD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAGA,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAI;AAC1B;AACA;AACA;AACA,CAJA;KAAMD,M;;AAMN,MAAME,QAAN,SAAuBV,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE7BW,KAF6B,GAErB;AACJC,MAAAA,IAAI,EAAE;AADF,KAFqB;;AAAA,SA0B7BC,OA1B6B,GA0BnB,YAAW;AACjB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B,CADiB,CAC2B;;AAC5C,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,aAAOD,IAAP;AACH,KA9B4B;AAAA;;AAM7B;;AACA;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,iBAAiB,GAAG;AAChB,SAAKL,OAAL,GACKM,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAACT,MAAAA,IAAI,EAAEQ;AAAP,KAAd,CADjB,EAEKE,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB;AAGIC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyB,KAAKd,KAAL,CAAWC,IAAhD;AACP;AAED;AACJ;AACA;AACA;AACA;;;AASIc,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,MAAD;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAA,iCACI,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAG,YAApB;AAAA,sBACA,KAAKf,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWC,IAAX,CAAgBe,GAAhB,CAAoB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAChD,kCAAO,QAAC,SAAD;AACa,gBAAA,OAAO,EAAED,CAAC,CAACE,OADxB;AAEa,gBAAA,KAAK,EAAEF,CAAC,CAACG,KAFtB;AAGa,gBAAA,GAAG,EAAEH,CAAC,CAACI;AAHpB,iBAAgBH,KAAhB;AAAA;AAAA;AAAA;AAAA,sBAAP;AAIH,aALiB,CAAlB,GAKM;AANN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AAnD4B;;AAuDjC,eAAenB,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport { Route, Switch, BrowserRouter as Router} from 'react-router-dom';\r\nimport BoardList from './BoardList';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Center = styled.div`\r\n  height: 92vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n`\r\n\r\nclass MainList extends Component {\r\n    // callApi : fetch를 통해 select -> response -> componentDidMount() res -> setState(board) -> state.board가 수정 -> BoardList에 props 형태로 전달\r\n    state = {\r\n        pays: ''\r\n    }\r\n\r\n    // 생명주기   \r\n    /*       \r\n        componentDidAmont() 메서드 : 컴포넌트가 마운트 된 직후 호출되며, 데이터로딩과 같은 작업 등에 재정의\r\n        예 ) List에 특정 item들을 출력하고자 할때 item에 들어갈 Data가 Server에 존재한다면 Server에서 읽어와서\r\n        item 데이터가 state에 존재시 이 state에 데이터를 setting하는 작업\r\n        마운트 즉 React 컴포넌트가 실제 DOM에 삽입된 후 서버로부터 데이터를 읽어와서 setState후 화면에 rerendering\r\n    */\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then(res => this.setState({pays: res}))\r\n            .catch(err => console.log(err));\r\n            console.log(\"this.state.board ==>\" + this.state.pays);\r\n    }\r\n\r\n    /*\r\n        async/await는 Promise를 더욱 쉽게 사용할 수 있도록 해주는 ES8(ES2017) 문법이다.\r\n        이 문법을 사용하기 위해서 함수의 앞부분에 async 키워드를 추가하고,\r\n        해당 함수 내부에서 Promise의 앞부분에 await 키워드를 사용한다.    \r\n\r\n    */\r\n    callApi = async() => {\r\n        const response = await fetch('/api/test');  // await fetch('/url')로 json 형식으로 가져온 리스트(boardList)를 받아와서 response에 담는다.\r\n        const body = await response.json();\r\n        return body;\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Router>\r\n                <Center>\r\n                    <Sidebar/>\r\n                    <Switch>\r\n                        <Route exact path = \"/BoardList\">{\r\n                        this.state.pays ? this.state.pays.map((b, index) => {\r\n                            return <BoardList key={index}\r\n                                                paykind={b.PAYKIND}\r\n                                                price={b.PRICE}\r\n                                                fee={b.FEE} />\r\n                        })  : ''\r\n                    }</Route>\r\n                    </Switch>\r\n                </Center>\r\n            </Router>    \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainList;"]},"metadata":{},"sourceType":"module"}