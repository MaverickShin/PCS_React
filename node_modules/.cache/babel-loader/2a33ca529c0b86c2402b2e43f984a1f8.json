{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev88\\\\workspace_react\\\\board2\\\\front\\\\src\\\\components\\\\MainList.js\";\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport '../css/App.css';\nimport { Table, TableHead, TableRow, TableCell, AppBar } from '@material-ui/core';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport BoardList from './BoardList';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MainList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pays: ''\n    };\n\n    this.callApi = async () => {\n      const response = await fetch('/api/test'); // await fetch('/url')로 json 형식으로 가져온 리스트(boardList)를 받아와서 response에 담는다.\n\n      const body = await response.json();\n      return body;\n    };\n  }\n\n  // 생명주기   \n\n  /*       \r\n      componentDidAmont() 메서드 : 컴포넌트가 마운트 된 직후 호출되며, 데이터로딩과 같은 작업 등에 재정의\r\n      예 ) List에 특정 item들을 출력하고자 할때 item에 들어갈 Data가 Server에 존재한다면 Server에서 읽어와서\r\n      item 데이터가 state에 존재시 이 state에 데이터를 setting하는 작업\r\n      마운트 즉 React 컴포넌트가 실제 DOM에 삽입된 후 서버로부터 데이터를 읽어와서 setState후 화면에 rerendering\r\n  */\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      board: res\n    })).catch(err => console.log(err));\n    console.log(\"this.state.board ==>\" + this.state.board);\n  }\n  /*\r\n      async/await는 Promise를 더욱 쉽게 사용할 수 있도록 해주는 ES8(ES2017) 문법이다.\r\n      이 문법을 사용하기 위해서 함수의 앞부분에 async 키워드를 추가하고,\r\n      해당 함수 내부에서 Promise의 앞부분에 await 키워드를 사용한다.    \r\n    */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(AppBar, {\n          position: \"static\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          align: \"center\",\n          children: \" \\uAC8C\\uC2DC\\uD310 \\uBAA9\\uB85D \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          children: /*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"TITLE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"CONTENT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"EMAIL\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"REGDATE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), this.state.board ? this.state.board.map((b, index) => {\n          return /*#__PURE__*/_jsxDEV(BoardList, {\n            board_no: b.BOARD_NO,\n            board_title: b.BOARD_TITLE,\n            board_content: b.BOARD_CONTENT,\n            board_email: b.BOARD_EMAIL,\n            board_regdate: b.BOARD_REGDATE\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 40\n          }, this);\n        }) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MainList;","map":{"version":3,"sources":["C:/Dev88/workspace_react/board2/front/src/components/MainList.js"],"names":["React","Component","Header","Table","TableHead","TableRow","TableCell","AppBar","BrowserRouter","Router","BoardList","moment","MainList","state","pays","callApi","response","fetch","body","json","componentDidMount","then","res","setState","board","catch","err","console","log","render","map","b","index","BOARD_NO","BOARD_TITLE","BOARD_CONTENT","BOARD_EMAIL","BOARD_REGDATE"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport '../css/App.css';\r\nimport {Table, TableHead, TableRow, TableCell, AppBar} from '@material-ui/core';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nimport BoardList from './BoardList';\r\nimport moment from 'moment';\r\n\r\nclass MainList extends Component {\r\n    // callApi : fetch를 통해 select -> response -> componentDidMount() res -> setState(board) -> state.board가 수정 -> BoardList에 props 형태로 전달\r\n    state = {\r\n        pays: ''\r\n    }\r\n\r\n    // 생명주기   \r\n    /*       \r\n        componentDidAmont() 메서드 : 컴포넌트가 마운트 된 직후 호출되며, 데이터로딩과 같은 작업 등에 재정의\r\n        예 ) List에 특정 item들을 출력하고자 할때 item에 들어갈 Data가 Server에 존재한다면 Server에서 읽어와서\r\n        item 데이터가 state에 존재시 이 state에 데이터를 setting하는 작업\r\n        마운트 즉 React 컴포넌트가 실제 DOM에 삽입된 후 서버로부터 데이터를 읽어와서 setState후 화면에 rerendering\r\n    */\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then(res => this.setState({board: res}))\r\n            .catch(err => console.log(err));\r\n            console.log(\"this.state.board ==>\" + this.state.board);\r\n    }\r\n\r\n    /*\r\n        async/await는 Promise를 더욱 쉽게 사용할 수 있도록 해주는 ES8(ES2017) 문법이다.\r\n        이 문법을 사용하기 위해서 함수의 앞부분에 async 키워드를 추가하고,\r\n        해당 함수 내부에서 Promise의 앞부분에 await 키워드를 사용한다.    \r\n\r\n    */\r\n    callApi = async() => {\r\n        const response = await fetch('/api/test');  // await fetch('/url')로 json 형식으로 가져온 리스트(boardList)를 받아와서 response에 담는다.\r\n        const body = await response.json();\r\n        return body;\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Router>\r\n                <div display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                    <AppBar position=\"static\">\r\n                            <div><Header /></div>\r\n                    </AppBar> \r\n                    <br/>\r\n\r\n                    <h3 align=\"center\"> 게시판 목록 </h3>\r\n\r\n                    <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell><b>No</b></TableCell>\r\n                                    <TableCell><b>TITLE</b></TableCell>\r\n                                    <TableCell><b>CONTENT</b></TableCell>\r\n                                    <TableCell><b>EMAIL</b></TableCell>\r\n                                    <TableCell><b>REGDATE</b></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                    </Table>\r\n\r\n                        {/* setState()에 의해 board 변수의 값이 select한 결과로 변경후, BoardList에 props 형태로 board_tbl 테이블의 게시판정보 데이터 전달 */}\r\n                        { /* props로 전달할 값들은 반드시 대문자 컬럼 */}\r\n                        {\r\n                            this.state.board ? this.state.board.map((b, index) => {\r\n                                return <BoardList key={index}\r\n                                                    board_no={b.BOARD_NO}\r\n                                                    board_title={b.BOARD_TITLE}\r\n                                                    board_content={b.BOARD_CONTENT}\r\n                                                    board_email={b.BOARD_EMAIL}\r\n                                                    board_regdate={b.BOARD_REGDATE} />\r\n                            })  : ''\r\n                        }\r\n                </div>\r\n            </Router>    \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainList;"]},"metadata":{},"sourceType":"module"}